单个参数：mybatis不会做特殊处理
    #{参数名}：取出参数
多个参数：mybatis会做特殊处理
    多个参数会被封装成一个map
        key:param1...paramN,或者参数的索引也可以
        value:传入的参数值
    #{}就是从map中获取指定的key的值
    推荐使用命名参数：明确指定封装参数时map的key -->> @Param("id")
                    多个参数会被封装成一个map
                    key:使用 @Param 注解指定的值
                    value:参数值
                    #{指定的key}取出对应的参数值
如果多个参数正好是我们的业务逻辑的数据模型，可以直接传入POJO
    #{属性名} 取出传入的POJO的属性值
如果多个参数不是业务逻辑中的数据模型，没有对应的POJO，不经常使用可以考虑直接传入map
    #{key} 取出map中key对应的值
如果多个参数虽然不是业务模型中的数据，但是经常要使用，推荐编写一个TO（Transfer Object）数据传输对象
    Page{
        int pageNo;
        int pageSize;
    }
特别注意，如果参数传入 Collection(List、Set) 类型或者是数组类型，也会特殊处理，也是把传入的list或者数组封装在map中,
    key:Collection(collection),如果是List还可以使用key(list)
        数组(array)
    public Employee getEmployeeByConditions(List<Integer> ids);
        取出第一个值：#{list[0]}

源码：
    @Param("id") Integer id, @Param("lastName") String lastName
    ParamNameResolver 解析参数封装map的：
    //1、names：{0=id,1=lastName}
        1.获取每个标了 @Param 注解的参数的@Param值(id,lastName)，赋值给name
        2.每次解析一个参数给map中保存信息，(key->参数索引,value:name的值[标注了注解，就会给那么赋值，没有标注，如果全局配置了useActualParamName，name==参数名[jkd8自动开启]，就是 map 的size  ])

args[1,"Tom"]
public Object getNamedParams(Object[] args) {
    final int paramCount = names.size();
    // 1.参数为null，直接返回
    if (args == null || paramCount == 0) {
      return null;
    }
    // 2.如果有一个元素，并且没有 @Param 注解，单个参数注解返回，并取 args[0]
    else if (!hasParamAnnotation && paramCount == 1) {
      return args[names.firstKey()];
    }
    // 3.多个元素，或者有 @Param 注解
    else {
      final Map<String, Object> param = new ParamMap<>();
      int i = 0;
      // 4.遍历names集合 {0=id,1=lastName}
      for (Map.Entry<Integer, String> entry : names.entrySet()) {
        // names集合中value作为key，names集合中的key，有作为取值的参考 args[0],args[1,"Tom"]
        // {id=args[0],lastName=args[1]}
        param.put(entry.getValue(), args[entry.getKey()]);
        // add generic param names (param1, param2, ...)
        // 额外的将每一个参数也保存到map中，使用新的key->param1...paramN
        // 效果：有Param注解可以#{指定的key},或者#{param1}
        // {id=args[0],lastName=args[1],param1=args[0],param2=args[1]}
        final String genericParamName = GENERIC_NAME_PREFIX + (i + 1);//GENERIC_NAME_PREFIX = "param"
        // ensure not to overwrite parameter named with @Param
        if (!names.containsValue(genericParamName)) {
          param.put(genericParamName, args[entry.getKey()]);
        }
        i++;
      }
      return param;
    }
  }
==========================================参数值的获取===================================================
#{}可以获取map中的值或者POJO属性的值
${}可以获取map中的值或者POJO属性的值
    区别：
        #{}是以预编译的形式将参数设置到sql语句中并提供占位符（PrepairedStatement），防止sql注入
        ${}是取出的值直接封装在sql语句中，会有安全问题
        大多数情况下，取参数值使用#{}，
        原生jdbc不支持占位符的地方，可以使用${}
        分表、排序情况下：按年份分表拆分了薪资表
            select * from 2016_salary -->> select * from ${year}_salary
#{}更丰富的用法
    规定参数的规则：javaType、mode（存储过程）、numericScale（保留几位小数）、resultMap、typeHandler、jdbcTypeName、expression
    jdbcType:在某种特定的条件下需要被设置，在数据为Null的时候有些数据库可能不能识别mybatis对null的默认处理，比如Oracle（报错）
    无效列类型：mybatis对所有的null都映射的是原生 Jdbc 的 OTHER 类型的数据，Oracle不能识别
    由于全局配置中，jdbcTypeForNull=OTHER，Oracle不支持，可以在全局配置文件中设置这个参数或者在为null的Mapper映射文件中的sql语句中，添加jdbcType=NULL

